#!/bin/bash
# backup-homedir-to-usbdisk
# makes a backup of some dirs to a usb disk if present

# Copyright (C) 2014-2015 Alexander Swen <alex@swen.nu>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# starten kan met konsole --notoolbar --notabbar --nomenubar -T BACKUP --vt_sz 157x55 -e /data/scripts/backup-to-usb-disk
# of gnome-terminal --window-with-profile=HIER --hide-menubar --geometry=112x50 -t "homedir naar server"  --working-directory="/home/alex"  -e '/data/scripts/backup-to-usb-disk'

# Alexander Swen
# Private contact: alex@swen.nu

# CHANGELOG:
# 2009-05-27	A.Swen	created.

# SETTINGS
date=$(date +%Y%m%d)
me=$(basename $0)
mydir=$(dirname $0)
export TIME="\nAlles wat je hierboven ziet is gebackupped (plus alles wat al was gebackupped natuurlijk)\n\nHet backuppen duurde %E. (achter de punt zijn tienden van seconden).\n"

# FUNCTIONS
die () {
  rc=$1
  shift
  printf '%s\n' "=====================" >&2
  printf '%s\n' "==== FATAL ERROR ====" >&2
  printf '%s\n\n' "=====================" >&2
  printf '%s\n\n' "$@" >&2
  read whatever
  exit $rc
}

usage () {
  printf '%s\n' "===============" >&2
  printf '%s\n' "==== USAGE ====" >&2
  printf '%s\n\n' "===============" >&2
  printf '%s\n' "Usage: $me " >&2
  printf '%s\n\n' "example: $me " >&2
  exit 1
}

log () { printf '%s %s\n' "$(date +%F' '%T)" "$@"; }

find_usb_mount () {
  number_of_external_disks=$(mount|grep '^/dev/sd[a-z]1\son\s/media/'|wc -l)
  if [ $number_of_external_disks -gt 1 ];then
    die 1 "Er zijn teveel externe schijven aangesloten, zo kan ik niet kiezen. Sluit max 1 usb schijf aan."
  elif [ $number_of_external_disks -lt 1 ];then
    die 1 "Ik kan geen aangesloten (en gemounte) usb schijf vinden. Sluit de usb schijf aan en kijk met een verkenner of je de inhoud kunt bekijken in /media/"
  else
    usbmount="$(mount|grep -o '^/dev/sd[a-z]1\son\s/media/.*\stype\s'|sed -e 's?^/dev/sd[a-z]1\son\s??' -e 's?\stype\s$??')"
  fi
}

# SCRIPT
find_usb_mount
doeldir="$usbmount/DOCUMENTEN/DOCUMENTEN $(date +%y-%m-%d)"
time /usr/bin/rsync -av --no-perms --no-owner --no-group --size-only "${HOME}/DOCUMENTEN/" "$doeldir" || die 5 "Er ging iets fout. Bel Alex."

printf '%s\n\n' "Ik haal nog wat informatie op ter controle:"

# Calc dirsizes
du_home="$(du -sh "$HOME/DOCUMENTEN"|awk '{print $1}')"
du_doeldir="$(du -sh "$doeldir"|awk '{print $1}')"

# Count files
nf_home="$(find "$HOME/DOCUMENTEN" -type f|wc -l)"
nf_doeldir="$(find "$doeldir" -type f|wc -l)"

printf '%s:\nAantal bestanden : %s\nGrootte directory: %s\n\n' "$HOME/DOCUMENTEN" "$nf_home" "$du_home"
printf '%s:\nAantal bestanden : %s\nGrootte directory: %s\n\n' "$doeldir" "$nf_doeldir" "$du_doeldir"

printf '%s\n\n' "Druk op een enter om dit scherm te sluiten"
read whatever

# END
