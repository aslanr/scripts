#!/bin/bash
# centos-postinstall
# This script takes care of all post install work

# Copyright (C) 2014-2015 Alexander Swen <alex@swen.nu>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Alexander Swen
# Private contact: alex@swen.nu

# CHANGELOG:
# 29-11-2006  A.Swen  created.
# 17-07-2007  A.Swen  updated for different OS levels

# TODO
# Off course this script is obsoleted by the powers of puppet. I moved it in
# this repo just because it has some neat tricks that might be usefull for
# others or as a reference for myself.

# SETTINGS
export date=$(date +%Y%m%d)
export me=$(basename $0)
export mydir=$(dirname $0)
tmp_dir=${mydir}

[ -f ${tmp_dir}/serverprofile ] && . ${tmp_dir}/serverprofile
is_vmware_guest=$([ "$(dmidecode|grep -A 1 "System Information"|tail -1|grep VMware)" ] && echo 1 || echo 0)
is_kvm_guest=$([ "$(dmidecode|grep -A 1 "BIOS Information"|tail -1|grep QEMU)" ] && echo 1 || echo 0)
if [ ${is_vmware_guest} -eq 1 -o ${is_kvm_guest} -eq 1 ];then
  services_to_stop="qemu lm_sensors iscsi iscsid libvirtd firstboot bluetooth pcscd gpm exim sendmail mdmonitor microcode.ctl restorecond yum-updatesd sendmail isdn pcmcia cups smartd"
else
  cpubrand=cat /proc/cpuinfo |awk '/vendor_id/ {print $3}'|tail -1
  services_to_stop="$([ "${cpubrand}" = "GenuineIntel" ] || echo "microcode.ctl") pcscd restorecond yum-updatesd sendmail isdn pcmcia cups"
fi

# FUNCTIONS
die () {
  rc=$1
  shift
  echo "==========================">&2
  echo "====    FATAL  ERROR  ====" >&2
  echo "==========================">&2
  echo "" >&2
  echo $@ >&2
  exit $rc
}

check_lvm () {
  echo "========================== Configure LVM ========================="
  for lv in /dev/mapper/vg_*;do
    lvname=$(echo ${lv}|awk -F - '{print $2}')
    vgname=$(echo ${lv}|awk -F - '{print $1}'|sed -e 's/.*vg_/vg_/g')
    lvmountpoint=/$([ "${type}" = "db" ] && echo data/)$(echo ${lvname}|sed -e 's/lv_//g')
    [ "$(mount|egrep "${lvmountpoint}|${lvname}")" ] && continue
    [ "$(egrep "${lv}|${lvname}|${lvmountpoint}" /etc/fstab)" ] && continue
    [ -z "${lvname}" -o -z "${lv}" -o -z "${vgname}" -o -z "${lvmountpoint}" ] && continue
    [ ! -d "${lvmountpoint}" ] && mkdir -p "${lvmountpoint}" || continue
    echo -e "Adding /dev/${vgname}/${lvname}\t${lvmountpoint}\text3\tdefaults\t0\t0 to fstab"
    echo -e "/dev/${vgname}/${lvname}\t${lvmountpoint}\text3\tdefaults\t0\t0" >> /etc/fstab
    mount ${lvmountpoint}
  done
}

mk_filesystems () {
  echo "===================== configure filesystems ======================"
  for x in ${datadir}/{backup,software,scripts};do [ ! -d "${x}" ] && install -dm 770 -o root -g staff "${x}";done
  lvs|awk '/lv_/ && ! /data/ && ! /swap/ {print $1" "$2}'|while read lvname vgname;do
    export lvname vgname
    tune2fs -L ${lvname} -r 1 -c 30 /dev/${vgname}/${lvname}
    perl -pi -e 's?/dev/$ENV{vgname}/$ENV{lvname}?LABEL=$ENV{lvname}   ?g' /etc/fstab
  done
  lvs|awk '/swap/ {print $1" "$2}'|while read lv_swap vg_swap;do
    export lv_swap vg_swap
    if [ -n "${lv_swap}" -a -n "${vg_swap}" ];then
      mkswap -L ${lv_swap} /dev/${vg_swap}/${lv_swap}
      perl -pi -e 's?/dev/$ENV{vg_swap}/$ENV{lv_swap}?LABEL=$ENV{lv_swap}   ?g' /etc/fstab
    fi
  done
  awk '/boot/ && ! /tftpboot/ {print $1}' /etc/fstab|while read boot;do
    export boot
    tune2fs -L boot ${boot}
    perl -pi -e 's?$ENV{boot}?LABEL=boot   ?g' /etc/fstab
  done
  mount -o remount,acl /data
  chcon -t var_t /data
  groupadd data_ro
  groupadd data_rw
  setfacl -m g:data_ro:rx /data
  setfacl -m d:g:data_ro:rx /data
  setfacl -m g:data_rw:rwx /data
  setfacl -m d:g:data_rw:rwx /data
  setfacl -m g:staff:rwx /data
  setfacl -m d:g:staff:rwx /data
}

create_staff_user() {
  unset shell
  [ -e /bin/bash3 ] && shell="-s /bin/bash3"
  [ "$(grep "$2" /etc/passwd)" = "" ] && ${addcmd} -u "$1" -G staff,wheel -p "$4" -c "$3" $shell "$2"
  if [ ${#5} -gt 0 ]; then
    h="/home/$2"
    [ ! -d $h/.ssh ] && mkdir -p $h/.ssh
    chmod 700 $h
    chmod 700 $h/.ssh
    echo "$5" >> $h/.ssh/authorized_keys
    chmod 600 $h/.ssh/authorized_keys
    chown -R $2:staff $h
  fi
  echo "Created staff user $2 ${3}"
}

getfile () {
  [ -z "${dirowner}" ] && dirowner=${owner}
  echo "Getting file ${getfile} from ${inst_server} and saving as ${tgtpath}/${tgtfile}"
  [ ! -d "${tgtpath}" ] && mkdir -p ${tgtpath}
  wget -q $([ ! "${os_version}" = "4.0-32" ] && echo "--no-cache ")http://${inst_server}/inst/cfgfiles/${getfile} -O ${tgtpath}/${tgtfile}
  [ ! "${tgtpath}" = "/etc" ] && chown ${dirowner}:${owngrp} "${tgtpath}"
  chmod ${dirperm} "${tgtpath}"
  chown ${owner}:${owngrp} ${tgtpath}/${tgtfile}
  chmod ${perm} ${tgtpath}/${tgtfile}
  unset dirowner
}

enableservice () {
  if [ -f /etc/init.d/${1} ];then
    echo Starting service ${1}
    /sbin/chkconfig --add ${1}
    /sbin/chkconfig ${1} on
  fi
}

conf_logrotate_small_disk () {
  echo "============= Configure logrotate for small disks ================"
  perl -pi -e '
    s/week/dai/g ;
    s/^#compress/compress/g ;
    s/^rotate 4/rotate 2/g '\
    /etc/logrotate.conf
}

mk-dns-server () {
  echo "========================== Configure DNS ========================="
  export nameddir=/var/named/chroot
#  perl -pi -e ' s?CHROOT_PREFIX="/var/lib/named"?CHROOT_PREFIX="$ENV{nameddir}"? ' /etc/init.d/named
#  perl -pi -e ' s?^NAMED_RUN_CHROOTED=.*?NAMED_RUN_CHROOTED=yes? ' /etc/sysconfig/named
#  mknod ${nameddir}/dev/null c 1 3
#  mknod ${nameddir}/dev/random c 1 8
#  chmod 666 ${nameddir}/dev/{null,random}
#  cp /etc/localtime ${nameddir}/etc
#  perl -pi -e 's?SYSLOGD_ADDITIONAL_SOCKET_NAMED=.*?SYSLOGD_ADDITIONAL_SOCKET_NAMED="$ENV{nameddir}/dev/log"? ' /etc/sysconfig/syslog
#  find ${nameddir} -type d -exec chmod 700 {} \;
#  find ${nameddir} -type f -exec chmod 600 {} \;
#  # configure logrotate for named
  cat << EOFLGOROTATE > /etc/logrotate.d/named
/var/named/chroot/var/log/*.log {
  missingok
  notifempty
  compress
  daily
  rotate 7
  create 0644 named named
  postrotate
    /sbin/service named reload  2> /dev/null > /dev/null || true
  endscript
}
EOFLGOROTATE
#  conf_logrotate_small_disk
#  enableservice named
  setsebool -P named_write_master_zones 1
  rmdir ${nameddir}/var/named/{data,slaves}
  install -dm 770 -o named -g named ${nameddir}/var/named/{internal,external}
  chcon system_u:object_r:named_zone_t ${nameddir}/var/named/*
  install -dm 770 -o named -g named ${nameddir}/var/log/named
  chcon system_u:object_r:named_cache_t ${nameddir}/var/log/named
  tgtpath=${nameddir}/etc
  owner=named
  owngrp=named
  dirperm=750
  perm=640
  tgtfile=named_logging.conf
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  tgtpath=${nameddir}/var/named/external
  owner=root
  owngrp=root
  dirperm=770
  perm=644
  tgtfile=db.bind
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  tgtpath=${nameddir}/var/named/internal
  tgtfile=db.0.0.127.in-addr.arpa
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  tgtfile=db.localhost
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  tgtfile=root.hints
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile

  [ -d /etc/cron.d ] || install -dm 700 -o root -g root /etc/cron.d
  echo "*/1 * * * * root /usr/sbin/rndc stats" > /etc/cron.d/dnsstat.cron
  [ -d /data ] || install -dm 770 -o root -g root /data
  ln -s ${nameddir} /data/named
  ln -s ${nameddir} /etc/named
  ln -s ${nameddir}/var/log /var/log/named
  ln -s ${nameddir}/var/run/named.pid /var/run
  service named start

  useradd -c "syncuser voor stats" -mp 'pass' syncuser
  install -dm 700 -o syncuser -g syncuser ~syncuser/.ssh
  cat << EOF > ~syncuser/.ssh/known_hosts
  ### You can add known hosts here
EOF
  chown syncuser:syncuser ~syncuser/.ssh/known_hosts
  chmod 644 ~syncuser/.ssh/known_hosts


  tgtpath=/data/scripts
  owner=root
  owngrp=root
  dirperm=755
  perm=770
  tgtfile=sync_stats
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  tgtpath=/etc/cron.d
  tgtfile=sync_stats.cron
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile

  cat << EOF

========================= Configure syncuser ========================
LETOP: je moet nog de id_rsa file plaatsen in ~syncuser/.ssh!
Deze kun je vinden op de managementserver in de homedir van syncuser
of op een andere dns server waarop dit al geregeld is.

gebruik bijvoorbeeld

scp syncuser@hostname:.ssh/id_rsa ~syncuser/.ssh/
chown -R syncuser:syncuser ~syncuser/.ssh
chmod 644 ~syncuser/.ssh/id_rsa

========================= Configure syncuser ========================

EOF

}

mk-dhcp-server () {
  echo "========================= Configure DHCPD ========================"
  network=$(echo ${internal_ip}|awk -F . '{print $3}')
  cat << EOFDHCPD > /etc/dhcpd.conf
# Global options
ddns-update-style interim;
ddns-domainname "swen.nu";
option netbios-name-servers 10.107.119.3;
option domain-name-servers 10.107.119.6;
option domain-name "swen.nu";
option ntp-servers 10.107.119.1;
next-server 10.107.119.6;
filename "pxelinux.0";
option tftp-server-name malibu;
option smtp-server 10.107.119.6;
default-lease-time 3600;
max-lease-time 7200;
log-facility local7;
option option-128 code 128 = string;
option option-129 code 129 = text;
option option-221 code 221 = text;

#key "rndc-key" {
#        algorithm hmac-md5;
#        secret "c+SMaMiXNSMUxaFTM5Xqql6e1Pj27LUX4jzOSEQANPa96L/eJzQrcQklsY8QmKfMHy14SDZUsvwlDMvck90UMg==";
#}

subnet 10.107.119.0 netmask 255.255.255.0 {
  range dynamic-bootp 10.107.119.201 10.107.119.240;
  option subnet-mask 255.255.255.0;
  option routers 10.107.119.1;
  echo allow unknown-clients;
  echo allow client-updates;
  ddns-updates on;
  authoritative;
  echo allow bootp;
}

EOFDHCPD

  # Configure syslog
  perl -pi -e ' s?cron.none.*/log/messages?cron.none;local6.none    /var/log/messages?g ' /etc/syslog.conf
  cat << EOFSYSLOG >> /etc/syslog.conf

# DHCPD
local6.*                    /var/log/dhcpd.log
EOFSYSLOG

  # configure logrotate for dhcpd
  cat << EOFLGOROTATE >> /etc/logrotate.d/dhcpd
/var/log/dhcpd.log {
  missingok
  notifempty
  compress
  daily
  rotate 7
  create 0600 root root
  postrotate
    /sbin/service dhcpd restart 2>&1 /dev/null || true
  endscript
}
EOFLGOROTATE
  enableservice dhcpd
}

mk-install-server () {
  echo "===================== Configure installserver ===================="
  mkdir -p /data/tftpboot /data/www
  cd /data/tftpboot
  mkdir -p pxelinux.cfg msgs cfgfiles post-scripts
  perl -pi -e '
    s?/tftpboot?/data/tftpboot?g  ;
    s?disable.*?disable                 = no?g '\
    /etc/xinetd.d/tftp
  [ -f /usr/lib/syslinux/pxelinux.0 ] && cp /usr/lib/syslinux/pxelinux.0 /data/tftpboot
  echo "options loop max_loop=64" >> /etc/modprobe.conf


}

mk-xrdp-server () {
  echo "======================= Configure RDPserver ======================"
  enableservice xrdpd
}

mk-zimbra-server () {
  echo "======================= Configure Zimbraserver ======================"
}

mk-puppetmaster () {
  echo "======================= Configure Puppetmaster ======================"
  # http://www.tomhayman.co.uk/linux/install-puppet-modpassenger-mysql-stored-procs-centos-6-rhel6/
  cat << EOF >> /etc/yum.repos.d/puppet.repo
[puppetlabs]
name=Puppet Labs Packages
baseurl=http://yum.puppetlabs.com/el/6/products/x86_64/
enabled=1
gpgcheck=0
[puppetlabs2]
name=Puppet Labs Packages Deps
baseurl=http://yum.puppetlabs.com/el/6/dependencies/x86_64/
enabled=1
gpgcheck=0
EOF
#  yum -y install epel-release
  rpm -Uvh http://download.fedora.redhat.com/pub/epel/6/i386/epel-release-6-5.noarch.rpm
#  rpm --import file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL
  yum -y install facter puppet puppet-server rubygem-rake
  enableservice puppetmaster
  /etc/init.d/puppetmaster start
  gem install rspec-puppet
}

mk-kvm-server () {
  enableservice libvirtd
  cat << EOF-cfg-kvmserver > ${tmp_dir}/cfg-kvmserver
#!/bin/bash
echo "======================= Configure kvmserver ======================"
echo "remove the startup of this script from /etc/rc.d/rc.local"
perl -ni -e 'print unless /'cfg-kvmserver'/' /etc/rc.d/rc.local
[ -f ${tmp_dir}/serverprofile ] && . ${tmp_dir}/serverprofile
/sbin/service network stop
perl -ni -e 'print unless /'eth'/' /etc/modprobe.conf
modprobe -r r8169 e1000
rmmod r8169
rmmod e1000
echo -e "alias eth0 r8169\nalias eth1 e1000\nalias eth2 e1000" >> /etc/modprobe.conf
cd /etc/sysconfig/network-scripts
for x in 4 3 2 1 0;do [ -f ifcfg-eth$x ] && mv ifcfg-eth$x ifcfg-eth$((x+1));done
[ -f ifcfg-eth5 ] && mv ifcfg-eth5 ifcfg-eth0
[ -f ifcfg-eth3 -a ! -f ifcfg-eth0 ] && mv ifcfg-eth3 ifcfg-eth0
  case ${me} in
    cider)
      echo -e "alias eth3 e1000\nalias eth4 e1000" >> /etc/modprobe.conf
      bridge=br0
      br_ip=${internal_ip}
      ifs="${internal_if}"
      brctl addbr \${bridge}
      for if in \${ifs};do
        brctl addif \${bridge} \${if}
        mac=\$(awk -F = '/HWADDR/ {print \$2}' ifcfg-\${if})
        line1=\$(head -1 ifcfg-\${if})
        cat << EOF > ifcfg-\${if}
\${line1}
DEVICE=\${if}
HWADDR=\${mac}
ONBOOT=yes
BRIDGE=\${bridge}
TYPE=Ethernet
EOF
      done
      cat << EOF > ifcfg-\${bridge}
DEVICE=\${bridge}
BOOTPROTO=static
IPADDR=\${br_ip}
GATEWAY=10.107.119.1
NETMASK=255.255.255.0
ONBOOT=yes
TYPE=Bridge
EOF
      bridge=br3
      br_ip=${br3_ip}
      ifs="eth3"
      brctl addbr \${bridge}
      for if in \${ifs};do
        brctl addif \${bridge} \${if}
        mac=\$(awk -F = '/HWADDR/ {print \$2}' ifcfg-\${if})
        line1=\$(head -1 ifcfg-\${if})
        cat << EOF > ifcfg-\${if}
\${line1}
DEVICE=\${if}
HWADDR=\${mac}
ONBOOT=yes
BRIDGE=\${bridge}
TYPE=Ethernet
EOF
      done
      cat << EOF > ifcfg-\${bridge}
DEVICE=\${bridge}
BOOTPROTO=static
IPADDR=\${br_ip}
NETMASK=255.255.255.0
ONBOOT=yes
TYPE=Bridge
EOF
      bridge=br4
      br_ip=${br4_ip}
      ifs="eth4"
      brctl addbr \${bridge}
      for if in \${ifs};do
        brctl addif \${bridge} \${if}
        mac=\$(awk -F = '/HWADDR/ {print \$2}' ifcfg-\${if})
        line1=\$(head -1 ifcfg-\${if})
        cat << EOF > ifcfg-\${if}
\${line1}
DEVICE=\${if}
HWADDR=\${mac}
ONBOOT=yes
BRIDGE=\${bridge}
TYPE=Ethernet
EOF
      done
      cat << EOF > ifcfg-\${bridge}
DEVICE=\${bridge}
BOOTPROTO=static
IPADDR=\${br_ip}
NETMASK=255.255.255.0
ONBOOT=yes
TYPE=Bridge
EOF
    ;;
    bigpeat|benriach)
      bridge=br0
      br_ip=${internal_ip}
      ifs="${internal_if}"
      brctl addbr \${bridge}
      for if in \${ifs};do
        brctl addif \${bridge} \${if}
        mac=\$(awk -F = '/HWADDR/ {print \$2}' ifcfg-\${if})
        line1=\$(head -1 ifcfg-\${if})
        cat << EOF > ifcfg-\${if}
\${line1}
DEVICE=\${if}
HWADDR=\${mac}
ONBOOT=yes
BRIDGE=\${bridge}
TYPE=Ethernet
EOF
      done
      cat << EOF > ifcfg-\${bridge}
DEVICE=\${bridge}
BOOTPROTO=static
IPADDR=\${br_ip}
GATEWAY=10.107.119.1
NETMASK=255.255.255.0
ONBOOT=yes
TYPE=Bridge
EOF
      bridge=br3
      br_ip=${br3_ip}
      ifs="eth1"
      brctl addbr \${bridge}
      for if in \${ifs};do
        brctl addif \${bridge} \${if}
        mac=\$(awk -F = '/HWADDR/ {print \$2}' ifcfg-\${if})
        line1=\$(head -1 ifcfg-\${if})
        cat << EOF > ifcfg-\${if}
\${line1}
DEVICE=\${if}
HWADDR=\${mac}
ONBOOT=yes
BRIDGE=\${bridge}
TYPE=Ethernet
EOF
      done
      cat << EOF > ifcfg-\${bridge}
DEVICE=\${bridge}
BOOTPROTO=static
IPADDR=\${br_ip}
NETMASK=255.255.255.0
ONBOOT=yes
TYPE=Bridge
EOF
      bridge=br4
      br_ip=${br4_ip}
      ifs="eth2"
      brctl addbr \${bridge}
      for if in \${ifs};do
        brctl addif \${bridge} \${if}
        mac=\$(awk -F = '/HWADDR/ {print \$2}' ifcfg-\${if})
        line1=\$(head -1 ifcfg-\${if})
        cat << EOF > ifcfg-\${if}
\${line1}
DEVICE=\${if}
HWADDR=\${mac}
ONBOOT=yes
BRIDGE=\${bridge}
TYPE=Ethernet
EOF
      done
      cat << EOF > ifcfg-\${bridge}
DEVICE=\${bridge}
BOOTPROTO=static
IPADDR=\${br_ip}
NETMASK=255.255.255.0
ONBOOT=yes
TYPE=Bridge
EOF
    ;;
  esac
/sbin/service network start
EOF-cfg-kvmserver
  chmod +x ${tmp_dir}/cfg-kvmserver
  echo "${tmp_dir}/cfg-kvmserver >>${logfile} 2>&1" >>/etc/rc.d/rc.local
}

mk-web-server () {
  cat << EOF-cfg-webserver > ${tmp_dir}/cfg-webserver
#!/bin/bash
echo "======================= Configure webserver ======================"
echo "remove the startup of this script from /etc/rc.d/rc.local"
perl -ni -e 'print unless /'cfg-webserver'/' /etc/rc.d/rc.local
[ -f ${tmp_dir}/serverprofile ] && . ${tmp_dir}/serverprofile

export me=${me}
export domain=${domain}
export datadir=/data
export wwwroot=\${datadir}/www
export def_web_svr=\${wwwroot}/default-web-server
export klant=${klant}

[ -d \${wwwroot} ] || mkdir -p \${wwwroot}
chown -R root:staff \${wwwroot}
chmod 755 \${wwwroot}
groupadd www_ro
groupadd www_rw
usermod -aG www_ro apache
usermod -aG data_ro apache
chcon -R -u system_u -t home_root_t \${wwwroot}
setsebool httpd_can_network_connect_db on
install -dm 755 -o apache -g apache \${def_web_svr}/{error,html,icons,manual}
chcon -R -t httpd_sys_content_t \${def_web_svr}/{,error,html,icons,manual}
install -dm 755 -o apache -g apache -Z system_u:object_r:httpd_sys_script_exec_t \${def_web_svr}/cgi-bin
chcon -R -t httpd_sys_script_exec_t \${def_web_svr}/cgi-bin
setfacl -R -m g:www_ro:rx \${wwwroot}
setfacl -R -m d:g:www_ro:rx \${wwwroot}
setfacl -R -m g:www_rw:rwx \${wwwroot}
setfacl -R -m d:g:www_rw:rwx \${wwwroot}
setfacl -R -m g:staff:rwx \${wwwroot}
setfacl -R -m d:g:staff:rwx \${wwwroot}
for dir in error icons manual;do cp -r /var/www/\${dir}/* \${def_web_svr}/\${dir}/;done
chown -R apache:apache \${def_web_svr}
perl -pi -e '
  s?^KeepAlive Off?KeepAlive On? ;
  s?^Alias /error/.*?Alias /error/ "\$ENV{def_web_svr}/error"? ;
  s?<Directory "/var/www/error"?<Directory "\$ENV{def_web_svr}/error"? ;
  s?^Alias /icons/.*?Alias /icons/ "\$ENV{def_web_svr}/icons"? ;
  s?^<Directory "/var/www/icons"?<Directory "\$ENV{def_web_svr}/icons"? ;
  s?^ScriptAlias /cgi-bin/.*?ScriptAlias /cgi-bin/ "\$ENV{def_web_svr}/cgi-bin"? ;
  s?^<Directory "/var/www/cgi-bin"?<Directory "\$ENV{def_web_svr}/cgi-bin"? ;
  s?^DocumentRoot.*?DocumentRoot \$ENV{def_web_svr}/html? ;
  s?^#NameVirtualHost.*?NameVirtualHost *:80? ;
  s?^#ServerName.*?ServerName \$ENV{me}.\$ENV{domain}:80? ;
  s?^DirectoryIndex.*?DirectoryIndex index.php index.html index.htm default.htm? ;
  s?^<Directory "/var/www/html"?<Directory "\$ENV{def_web_svr}/html"? ' /etc/httpd/conf/httpd.conf
[ -d /etc/httpd/vhosts.d ] || mkdir -p /etc/httpd/vhosts.d
cat << EOF-http >> /etc/httpd/conf/httpd.conf
<VirtualHost *:80>
  ServerAdmin alex@swen.nu
  ServerName www.swen.nu
  ErrorLog /var/log/httpd/shared-web.error.log
  CustomLog /var/log/httpd/shared-web.access.log combined
  DocumentRoot \${def_web_svr}/html
  <Directory "\${def_web_svr}/html">
    Options -Indexes
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>
  Alias /icons/ "\${def_web_svr}/icons/"
  <Directory "\${def_web_svr}/icons">
    Options -Indexes MultiViews
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>
  ScriptAlias /cgi-bin/ "\${def_web_svr}/cgi-bin/"
  <Directory "\${def_web_svr}/cgi-bin">
    AllowOverride None
    Options -Indexes
    Order allow,deny
    Allow from all
  </Directory>
  Alias /error/ "\${def_web_svr}/error/"
  <IfModule mod_negotiation.c>
    <IfModule mod_include.c>
      <Directory "\${def_web_svr}/error">
        AllowOverride None
        Options -Indexes IncludesNoExec
        AddOutputFilter Includes html
        AddHandler type-map var
        Order allow,deny
        Allow from all
        LanguagePriority en es de fr
        ForceLanguagePriority Prefer Fallback
      </Directory>
  #    ErrorDocument 400 /error/HTTP_BAD_REQUEST.html.var
  #    ErrorDocument 401 /error/HTTP_UNAUTHORIZED.html.var
  #    ErrorDocument 403 /error/HTTP_FORBIDDEN.html.var
  #    ErrorDocument 404 /error/HTTP_NOT_FOUND.html.var
  #    ErrorDocument 405 /error/HTTP_METHOD_NOT_ALLOWED.html.var
  #    ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var
  #    ErrorDocument 410 /error/HTTP_GONE.html.var
  #    ErrorDocument 411 /error/HTTP_LENGTH_REQUIRED.html.var
  #    ErrorDocument 412 /error/HTTP_PRECONDITION_FAILED.html.var
  #    ErrorDocument 413 /error/HTTP_REQUEST_ENTITY_TOO_LARGE.html.var
  #    ErrorDocument 414 /error/HTTP_REQUEST_URI_TOO_LARGE.html.var
  #    ErrorDocument 415 /error/HTTP_UNSUPPORTED_MEDIA_TYPE.html.var
  #    ErrorDocument 500 /error/HTTP_INTERNAL_SERVER_ERROR.html.var
  #    ErrorDocument 501 /error/HTTP_NOT_IMPLEMENTED.html.var
  #    ErrorDocument 502 /error/HTTP_BAD_GATEWAY.html.var
  #    ErrorDocument 503 /error/HTTP_SERVICE_UNAVAILABLE.html.var
  #    ErrorDocument 506 /error/HTTP_VARIANT_ALSO_VARIES.html.var
  </IfModule>
  </IfModule>
</VirtualHost>
include /etc/httpd/vhosts.d/*.conf
EOF-http
echo "<?php header(\\"Location: http://www.swen.nu/\\"); exit; ?>"  > \${def_web_svr}/html/index.php
echo "<?php phpinfo(); ?>" > \${def_web_svr}/html/t.php
perl -pi -e 's?^register_globals.*?register_globals = On?; s?^error_reporting.*?error_reporting = E_ALL & ~E_NOTICE? ' /etc/php.ini
EOF-cfg-webserver
  enableservice httpd
  chmod +x ${tmp_dir}/cfg-webserver
  echo "${tmp_dir}/cfg-webserver >>${logfile} 2>&1" >>/etc/rc.d/rc.local

  tgtpath=/data/scripts
  owner=root
  owngrp=root
  dirperm=770
  perm=770
  tgtfile=nieuwewebsite
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  tgtfile=crypt.php
  getfile=crypt.php.tmpl
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile

  echo "configure php"
  perl -pi -e 's/memory_limit = 8M/memory_limit = 32M/ ' /etc/php.ini
  mk-db-server
}

mk-web2-server () {
  echo "======================= Configure webserver ======================"
  # below you find the steps as lined at http://www.howtoforge.com/perfect-server-centos-5.5-x86_64-ispconfig-3-p4
  # that said, I removed and changed some steps ( E.G.: I had already installed the rpm txt key of Dag Wieers and added rpmforge repo during normal postinall)

  # 6 Securitylevel
  echo ""
  echo "ISPCONFIG step 6 reduce securitylevel"
  /sbin/chkconfig iptables off
  /sbin/service iptables stop

  # 7 install some software
  echo ""
  echo "ISPCONFIG step 7 install some software"
  tgtpath=/etc/yum.repos.d
  owner=root
  owngrp=root
  dirperm=755
  perm=755
  tgtfile=CentOS-Base.repo
  getfile=${tgtfile}-for-ISPConfig-server
  getfile
  yum -y update
  yum -y groupinstall development-libs development-tools

  # 8 Quota
  echo ""
  echo "ISPCONFIG step 8 quota"
  perl -pi -e 's?LABEL=lv_root     /                       ext3    defaults        1 1?LABEL=lv_root     /                       ext3    defaults,usrquota,grpquota        1 1?' /etc/fstab
  for x in user group;do install -m 600 -o root -g root /dev/null /aquota.${x};done
  mount -o remount /
  quotacheck -avugm
  quotaon -avug

  # 9 Install apache mysql phpmydamin
  echo ""
  echo "ISPCONFIG step 9 Install apache mysql phpmydamin"
  yum -y install ntp httpd mysql-server php php-mysql php-mbstring php-mcrypt phpmyadmin

  # 10 install Dovecot
  echo ""
  echo "ISPCONFIG step 10 install Dovecot"
  yum -y remove dovecot
  rpm -Uvh http://dl.atrpms.net/all/dovecot-1.2.15-1_113.el5.x86_64.rpm http://dl.atrpms.net/all/dovecot-sieve-0.1.18-6.el5.x86_64.rpm
  [ -d /usr/lib/dovecot ] && rm -rf /usr/lib/dovecot
  ln -s /usr/lib64/dovecot /usr/lib
  enableservice dovecot
  /sbin/service dovecot start

  # 11 install postfix with mysql + # 12 install getmail
  echo ""
  echo "ISPCONFIG step 11 install postfix with mysql + # 12 install getmail"
  yum -y erase postfix
  [ -f /etc/postfix/main.cf ] && rm -f /etc/postfix/main.cf
  yum -y install postfix getmail
  /sbin/chkconfig sendmail off
  enableservice postfix
  /sbin/service postfix start

  # 13 conf MYSQL and run secureserver jobs are done at end of this function
  echo ""
  echo "ISPCONFIG step 13 conf MYSQL and run secureserver jobs are done at end of this function"
  tgtpath=/etc/httpd/conf.d
  owner=root
  owngrp=root
  dirperm=755
  perm=644
  tgtfile=phpmyadmin.conf
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile

  tgtpath=/usr/share/phpmyadmin
  owner=root
  owngrp=root
  dirperm=755
  perm=740
  tgtfile=config.inc.php
  getfile=phpmyadmin-config.inc.txt
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  chgrp apache ${tgtpath}/${tgtfile}

  enableservice httpd
  /sbin/service httpd start

  # 14 install amavisd-new spamassassin and clamav
  echo ""
  echo "ISPCONFIG step 14 install amavisd-new spamassassin and clamav "
  yum -y install amavisd-new spamassassin unrar unzip bzip2 perl-DBD-mysql phpmyadmin
  echo "CONFIG_FILE=\\\"/etc/amavisd/amavisd.conf\\\" " >> /etc/sysconfig/amavisd
  sa-update
  enableservice amavisd
  enableservice clamd
  /usr/bin/freshclam
  /sbin/service amavisd start
  /sbin/service clamd start

  install -d -o amavis /var/run/amavisd /var/spool/amavisd /var/spool/amavisd/tmp /var/spool/amavisd/db
  ln -s /var/run/clamav/clamd.sock /var/spool/amavisd/clamd.sock

  # 15 Installing Apache2 With mod_php, mod_fcgi/PHP5, And suPHP
  echo ""
  echo "ISPCONFIG step 15 apache With mod_php, mod_fcgi/PHP5, And suPHP"
  tgtpath=/etc/yum.repos.d
  owner=root
  owngrp=root
  dirperm=755
  perm=755
  tgtfile=kbsingh-CentOS-Extras.repo
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  yum -y install php php-devel php-gd php-imap php-ldap php-mysql php-odbc php-pear php-xml php-xmlrpc php-eaccelerator php-mbstring php-mcrypt php-mhash php-mssql php-snmp php-soap php-tidy curl curl-devel perl-libwww-perl ImageMagick libxml2 libxml2-devel mod_fcgid php-cli httpd-devel bind-chroot webalizer perl-DateTime-Format-HTTP perl-DateTime-Format-Builder rkhunter squirrelmail pure-ftpd fail2ban munin munin-common munin-node

  perl -pi -e 's?^register_globals.*?register_globals = On?; s?^error_reporting.*?error_reporting = E_ALL & ~E_NOTICE?; s?memory_limit = 8M?memory_limit = 32M? ' /etc/php.ini
  echo "cgi.fix_pathinfo = 1" >> /etc/php.ini

  wget -q --no-cache http://suphp.org/download/suphp-0.7.1.tar.gz -O -|tar zxvf - -C /tmp
  cd /tmp/suphp-0.7.1/
  ./configure --prefix=/usr --sysconfdir=/etc --with-apr=/usr/bin/apr-1-config --with-apxs=/usr/sbin/apxs --with-apache-user=apache --with-setid-mode=owner --with-php=/usr/bin/php-cgi --with-logfile=/var/log/httpd/suphp_log --enable-SUPHP_USE_USERGROUP=yes
  make
  make install
  cat << EOFSUPHP > /etc/httpd/conf.d/suphp.conf
LoadModule suphp_module modules/mod_suphp.so
EOFSUPHP
  cd /tmp
  rm -rf /tmp/suphp*

  tgtpath=/etc
  owner=root
  owngrp=root
  dirperm=755
  perm=755
  tgtfile=suphp.conf
  getfile=${tgtfile}
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile

  /sbin/service httpd restart

  # 16 install pruftpd
  echo ""
  echo "ISPCONFIG step 16 install pureftpd"
  enableservice pure-ftpd
  /sbin/service pure-ftpd start

  # 17 install chrooted dns server
  echo ""
  echo "ISPCONFIG step 17 dns server"
  install -dm 755 -o named -g named /var/named/
  install -dm 775 -o named -g named /var/named/chroot/ /var/named/chroot/var/ /var/named/chroot/var/named/ /var/named/chroot/var/run/
  install -dm 777 -o named -g named /var/named/chroot/var/run/named/
  cd /var/named/chroot/var/named/
  ln -s ../../ chroot
  install -m 655 -o named -g named /usr/share/doc/bind-9.3.6/sample/var/named/named.local /var/named/chroot/var/named/named.local
  install -m 655 -o named -g named /usr/share/doc/bind-9.3.6/sample/var/named/named.root /var/named/chroot/var/named/named.root
  install -m 655 -o named -g named /dev/null /var/named/chroot/etc/named.conf.local
  install -m 655 -o named -g named /dev/null /var/named/chroot/var/log/named.log
  ln -s /var/named/chroot/var/log/named.log /var/log/

  tgtpath=/var/named/chroot/etc
  owner=root
  owngrp=root
  dirperm=755
  perm=755
  tgtfile=named.conf
  getfile=named-duvel.conf
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
  enableservice named
  /sbin/service named start

  # 18 install vlogger and webalizer
  echo ""
  echo "ISPCONFIG step 18 install vlogger and webalizer"
  wget -q --no-cache http://n0rp.chemlab.org/vlogger/vlogger-1.3.tar.gz -O -|tar zxvf - -C /tmp
  mv /tmp/vlogger-1.3/vlogger /usr/sbin/
  cd /tmp
  rm -rf /tmp/vlogger*

  # 19 install jailkit
  echo ""
  echo "ISPCONFIG step 19 install jailkit"
  wget -q --no-cache http://olivier.sessink.nl/jailkit/jailkit-2.11.tar.gz -O -|tar zxvf - -C /tmp
  cd /tmp/jailkit-2.11
  ./configure
  make
  make install
  cd /tmp
  rm -rf /tmp/jailkit-2.11*

  # 20 install fail2ban
  echo ""
  echo "ISPCONFIG step 20 fail2ban setup"
  enableservice fail2ban
  /sbin/service fail2ban start

  # 21 install rkhunter done at step 15
  echo ""
  echo "ISPCONFIG step 21 install rkhunter already done"

  # 22 install squirrelmail
  echo ""
  echo "ISPCONFIG step 22 squirrelmail"
  tgtpath=/etc/squirrelmail
  owner=root
  owngrp=root
  dirperm=755
  perm=755
  tgtfile=config_local.php
  getfile=squirrel-config.txt
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile

  # 23 install ISPconfig 3
  echo ""
  echo "ISPCONFIG step 23 download and extract ispconfig"
  wget -q --no-cache http://downloads.sourceforge.net/ispconfig/ISPConfig-3.0.3.tar.gz?use_mirror= -O -|tar zxvf - -C /tmp

  # 13 conf MYSQL and run secureserver jobs
  echo ""
  echo "ISPCONFIG step 13 again: configure DB server"
  mk-db-server
}

mk-db-server () {
  export datadir=/data
  export mydir=${datadir}/mysql
  cat << EOF-cfg-sqlserver > ${tmp_dir}/cfg-sqlserver
#!/bin/bash
echo "====================== Configure MySQLserver ====================="
echo "remove the startup of this script from /etc/rc.d/rc.local"
perl -ni -e 'print unless /'cfg-sqlserver'/' /etc/rc.d/rc.local

[ -f ${tmp_dir}/serverprofile ] && . ${tmp_dir}/serverprofile

export datadir=${datadir}
export mydir=${mydir}

[ -f /etc/my.cnf ] && cp /etc/my.cnf /etc/my.cnf.bck
[ -s /etc/my-huge.cnf ] && cp /etc/my-huge.cnf /etc/my.cnf
[ -s /etc/my-default.cnf ] && cp /etc/my-default.cnf /etc/my.cnf

setsebool allow_user_mysql_connect on

install -dm 775 -o mysql -g mysql \${mydir}
chcon -R -t mysqld_db_t \${mydir}

install -dm 770 -o mysql -g mysql -Z system_u:object_r:mysqld_db_t /data/mysql-backup
install -m 640 -o mysql -g mysql  -Z system_u:object_r:mysqld_log_t /dev/null /var/log/mysqld.log
ln -sf /var/log/mysqld.log /var/lib/mysql
ln -sf /var/log/mysqld.log \${mydir}
groupadd mysql_ro
groupadd mysql_rw
usermod -aG data_ro mysql
usermod -aG mysql_rw mysql
chmod 770 \${mydir}
setfacl -R -m g:mysql_ro:rx \${mydir}
setfacl -R -m d:g:mysql_ro:rx \${mydir}
setfacl -R -m g:mysql_rw:rwx \${mydir}
setfacl -R -m d:g:mysql_rw:rwx \${mydir}
setfacl -R -m g:staff:rwx \${mydir}
setfacl -R -m d:g:staff:rwx \${mydir}

if [ -f /etc/init.d/mysqld ];then
  echo Starting service mysqld...
  /sbin/chkconfig --add mysqld
  /sbin/chkconfig mysqld on
  /sbin/service mysqld start
fi


newmysqlpw="\$(head -c 200 /dev/urandom | tr -cd '[:alnum:]' | head -c 10;echo "")"
/usr/bin/mysqladmin -u root password "\${newmysqlpw}"
cat << EOF > ~root/.my.cnf
[client]
password        = "\${newmysqlpw}"
EOF

chown root:root ~root/.my.cnf
chmod 600 ~root/.my.cnf
/usr/bin/mysqladmin --defaults-file=~root/.my.cnf -h localhost.localdomain password "\${newmysqlpw}"

mysql --defaults-file=~root/.my.cnf <<EOF
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host!='localhost';
DROP DATABASE test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\%';
FLUSH PRIVILEGES;
EOF

EOF-cfg-sqlserver

  chmod +x ${tmp_dir}/cfg-sqlserver
  echo "${tmp_dir}/cfg-sqlserver >>${logfile} 2>&1" >>/etc/rc.d/rc.local

  owner=root
  owngrp=root
  tgtpath=/etc
  dirperm=755
  perm=644
  [ "${type}" = "db" ] && tgtfile=my-huge.cnf || tgtfile=my-default.cnf
  getfile=${tgtfile}
  getfile
  perl -pi -e 's?datadir=.*?datadir=$ENV{mydir}? ' /etc/my.cnf
  tgtpath=/etc/cron.d
  tgtfile=mysqlbackup.cron
  getfile=${tgtfile}
  dirperm=755
  perm=640
  [ ! -f ${tgtpath}/${tgtfile} ] && getfile
}

mk-ftp-server () {
  echo "====================== Configure VSFTPserver ====================="
cat << EOF-vsftpd > /etc/vsftpd/vsftpd.conf
ftpd_banner=Welcome to the FTP service.
anonymous_enable=YES
local_enable=YES
write_enable=YES
local_umask=022
anon_upload_enable=NO
anon_mkdir_write_enable=NO
anon_other_write_enable=NO
anon_world_readable_only=YES
hide_ids=YES
async_abor_enable=YES
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_file=/var/log/vsftpd.log
xferlog_std_format=YES
chroot_local_user=YES

listen=YES
max_clients=200
max_per_ip=4
#one_process_model=YES
idle_session_timeout=120
data_connection_timeout=300
accept_timeout=60
connect_timeout=60

pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=NO
EOF-vsftpd
}

mk_basic_fileserver () {
  echo "====================== configure basic Fileserver ======================"
  [ -f /etc/exports ] && cp /etc/exports /etc/exports.bck
  lvs|grep -v swap|awk '/lv_/ {print $1" "$2}'|while read lvname vgname;do export lvname vgname ; tune2fs -L ${lvname} -r 1 /dev/${vgname}/${lvname};perl -pi -e 's?/dev/$ENV{vgname}/$ENV{lvname}?LABEL=$ENV{lvname}   ?g' /etc/fstab;done
  export lv_swap=$(lvs|awk '/lv_swap/ {print $1}')
  export vg_swap=$(lvs|awk '/lv_swap/ {print $2}')
  [ -n "${lv_swap}" -a -n "${vg_swap}" ] && mkswap -L ${lv_swap} /dev/${vg_swap}/${lv_swap} && perl -pi -e 's?/dev/$ENV{vg_swap}/$ENV{lv_swap}?LABEL=$ENV{lv_swap}   ?g' /etc/fstab
  awk '/boot/ {print $1}' /etc/fstab|grep -v tftpboot|while read boot;do export boot ; tune2fs -L boot ${boot}; perl -pi -e 's?$ENV{boot}?LABEL=boot   ?g' /etc/fstab;done
  [ "$(grep staff /etc/group)" ] || /usr/sbin/groupadd staff
  cd /data
  for x in *;do
   [ "${x}" = "lost+found" ] && continue
   export x
   groupadd ${x}_ro
   groupadd ${x}_rw
   chown root:staff ${x}
   chmod 3775 ${x}
   echo -e "/data/$x\t10.107.119.0/24(rw,root_squash,sync)" >> /etc/exports
   perl -ni -e 'print unless /'${x}'/ ' /etc/fstab
   echo -e "LABEL=lv_${x}\t/data/${x}\text3\tdefaults,acl\t1\t2" >> /etc/fstab
   mount -o remount /data/${x}
   setfacl -m g:${x}_ro:rx /data/${x}
   setfacl -m d:g:${x}_ro:rx /data/${x}
   setfacl -m g:${x}_rw:rwx /data/${x}
   setfacl -m d:g:${x}_rw:rwx /data/${x}
   setfacl -m g:staff:rwx /data/${x}
   setfacl -m d:g:staff:rwx /data/${x}
  done
  perl -pi -e 's?-m root?-m alex\@swen.nu?g ' /etc/smartd.conf
  perl -pi -e 's?MAILADDR.*?MAILADDR alex\@swen.nu?g ' /etc/mdadm.conf

  echo "===================== configure samba shares ====================="
  cp /etc/samba/smb.conf /etc/samba/smb.conf.bck
  owner=root
  owngrp=root
  tgtpath=/etc/samba
  dirperm=755
  perm=644
  tgtfile=smb.conf
  getfile=${me}-${tgtfile}
  getfile
  tgtfile=smbusers
  getfile=${me}-${tgtfile}
  getfile
  enableservice smb

  echo "========================== config vsftpd ========================="
  cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bck
  owner=root
  owngrp=root
  tgtpath=/etc/vsftpd
  dirperm=755
  perm=600
  tgtfile=vsftpd.conf
  getfile=${me}-${tgtfile}
  getfile
  enableservice vsftpd

  echo "========================= config extra SW ========================"
  yum -y install ntfs-3g rar unrar pypar par2cmdline lxsplit
}

mk_leon_server () {
  echo "====================== configure leonserver ======================"
  [ -f /etc/exports ] && cp /etc/exports /etc/exports.bck
  lvs|grep -v swap|awk '/lv_/ {print $1" "$2}'|while read lvname vgname;do export lvname vgname ; tune2fs -L ${lvname} -r 1 /dev/${vgname}/${lvname};perl -pi -e 's?/dev/$ENV{vgname}/$ENV{lvname}?LABEL=$ENV{lvname}   ?g' /etc/fstab;done
  export lv_swap=$(lvs|awk '/lv_swap/ {print $1}')
  export vg_swap=$(lvs|awk '/lv_swap/ {print $2}')
  [ -n "${lv_swap}" -a -n "${vg_swap}" ] && mkswap -L ${lv_swap} /dev/${vg_swap}/${lv_swap} && perl -pi -e 's?/dev/$ENV{vg_swap}/$ENV{lv_swap}?LABEL=$ENV{lv_swap}   ?g' /etc/fstab
  awk '/boot/ {print $1}' /etc/fstab|grep -v tftpboot|while read boot;do export boot ; tune2fs -L boot ${boot}; perl -pi -e 's?$ENV{boot}?LABEL=boot   ?g' /etc/fstab;done
  [ "$(grep staff /etc/group)" ] || /usr/sbin/groupadd staff
  cd /data
  for x in *;do
   [ "${x}" = "lost+found" ] && continue
   export x
   groupadd ${x}_ro
   groupadd ${x}_rw
   chown root:staff ${x}
   chmod 3775 ${x}
   echo -e "/data/$x\t10.107.119.0/24(rw,root_squash,sync)" >> /etc/exports
   perl -ni -e 'print unless /'${x}'/ ' /etc/fstab
   echo -e "LABEL=lv_${x}\t/data/${x}\text3\tdefaults,acl\t1\t2" >> /etc/fstab
   mount -o remount /data/${x}
   setfacl -m g:${x}_ro:rx /data/${x}
   setfacl -m d:g:${x}_ro:rx /data/${x}
   setfacl -m g:${x}_rw:rwx /data/${x}
   setfacl -m d:g:${x}_rw:rwx /data/${x}
   setfacl -m g:staff:rwx /data/${x}
   setfacl -m d:g:staff:rwx /data/${x}
  done
  perl -pi -e 's?-m root?-m leonsemailaddress\@gmail.com?g ' /etc/smartd.conf
  perl -pi -e 's?MAILADDR.*?MAILADDR leonsemailaddress\@gmail.com?g ' /etc/mdadm.conf

  echo "===================== configure samba shares ====================="
  cp /etc/samba/smb.conf /etc/samba/smb.conf.bck
  owner=root
  owngrp=root
  tgtpath=/etc/samba
  dirperm=755
  perm=644
  tgtfile=smb.conf
  getfile=${me}-${tgtfile}
  getfile
  tgtfile=smbusers
  getfile=${me}-${tgtfile}
  getfile
  enableservice smb

  echo "========================== config vsftpd ========================="
  cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bck
  owner=root
  owngrp=root
  tgtpath=/etc/vsftpd
  dirperm=755
  perm=600
  tgtfile=vsftpd.conf
  getfile=${me}-${tgtfile}
  getfile
  enableservice vsftpd

  echo "========================= config extra SW ========================"
  yum -y install ntfs-3g rar unrar pypar par2cmdline lxsplit

}

mk-file-server () {
  echo "====================== configure fileserver ======================"
  [ -d /data ] && mount /dev/md2 /data
  cp /etc/fstab /etc/fstab.bck
  cat << EOF >> /etc/fstab
#LABEL=data              /data                   ext3    defaults        1 2
#LABEL=lv_nicali         /data/nicali            ext3    defaults        1 2
#LABEL=lv_tftpboot       /data/tftpboot          ext3    defaults        1 2
#LABEL=lv_scripts        /data/scripts           ext3    defaults        1 2
#LABEL=lv_drivers        /data/drivers           ext3    defaults        1 2
##LABEL=lv_upload         /data/upload            ext3    defaults        1 2
#LABEL=lv_meuk           /data/meuk              ext3    defaults        1 2
#LABEL=lv_software       /data/software          ext3    defaults        1 2
#LABEL=lv_boeken         /data/boeken            ext3    defaults        1 2
#LABEL=lv_foto           /data/foto              ext3    defaults        1 2
#LABEL=lv_movies         /data/movies            ext3    defaults        1 2
#LABEL=lv_mp3            /data/mp3               ext3    defaults        1 2
#LABEL=lv_strandwerk     /data/strandwerk        ext3    defaults        1 2
EOF
  [ -f /etc/exports ] && cp /etc/exports /etc/exports.bck
  cat << EOF > /etc/exports
/home   10.107.119.0/24(rw,root_squash,sync)
/data/boeken    10.107.119.0/24(rw,root_squash,sync)
/data/drivers   10.107.119.0/24(rw,root_squash,sync)
/data/foto      10.107.119.0/24(rw,root_squash,sync)
/data/kvm       10.107.119.0/24(rw,root_squash,sync)
/data/lost+found        10.107.119.0/24(rw,root_squash,sync)
/data/meuk      10.107.119.0/24(rw,root_squash,sync)
/data/movies    10.107.119.0/24(rw,root_squash,sync)
/data/mp3       10.107.119.0/24(rw,root_squash,sync)
/data/nicali    10.107.119.0/24(rw,root_squash,sync)
/data/scripts   10.107.119.0/24(rw,root_squash,sync)
/data/software  10.107.119.0/24(rw,root_squash,sync)
/data/strandwerk        10.107.119.0/24(rw,root_squash,sync)
/data/tftpboot  10.107.119.0/24(rw,root_squash,sync)
/data/upload    10.107.119.0/24(rw,root_squash,sync)
/data/vmware    10.107.119.0/24(rw,root_squash,sync)
EOF
  vgimport vg_12T_R6_data1
  vgchange -ay vg_12T_R6_data1
  lvscan
  lvs|grep -v swap|awk '/lv_/ {print $1" "$2}'|while read lvname vgname;do export lvname vgname ; tune2fs -L ${lvname} -r 1 /dev/${vgname}/${lvname};perl -pi -e 's?/dev/$ENV{vgname}/$ENV{lvname}?LABEL=$ENV{lvname}   ?g' /etc/fstab;done
  export lv_swap=$(lvs|awk '/lv_swap/ {print $1}')
  export vg_swap=$(lvs|awk '/lv_swap/ {print $2}')
  [ -n "${lv_swap}" -a -n "${vg_swap}" ] && mkswap -L ${lv_swap} /dev/${vg_swap}/${lv_swap} && perl -pi -e 's?/dev/$ENV{vg_swap}/$ENV{lv_swap}?LABEL=$ENV{lv_swap}   ?g' /etc/fstab
  awk '/boot/ {print $1}' /etc/fstab|grep -v tftpboot|while read boot;do export boot ; tune2fs -L boot ${boot}; perl -pi -e 's?$ENV{boot}?LABEL=boot   ?g' /etc/fstab;done
  [ "$(grep staff /etc/group)" ] || /usr/sbin/groupadd staff
  cd /data
  for x in *;do
   export x
   groupadd ${x}_ro
   groupadd ${x}_rw
   chown root:staff ${x}
   chmod 3775 ${x}
   echo -e "/data/$x\t10.107.119.0/24(rw,root_squash,sync)" >> /etc/exports
   perl -ni -e 'print unless /'$ENV{x}'/ ' /etc/fstab
   echo -e "LABEL=lv_${x}\t/data/${x}\text3\tdefaults,acl\t1\t2" >> /etc/fstab
   mount -o remount /data/${x}
   setfacl -m g:${x}_ro:rx /data/${x}
   setfacl -m d:g:${x}_ro:rx /data/${x}
   setfacl -m g:${x}_rw:rwx /data/${x}
   setfacl -m d:g:${x}_rw:rwx /data/${x}
   setfacl -m g:staff:rwx /data/${x}
   setfacl -m d:g:staff:rwx /data/${x}
  done
  perl -pi -e 's?-m root?-m alex\@swen.nu?g ' /etc/smartd.conf
  perl -pi -e 's?MAILADDR.*?MAILADDR alex\@swen.nu?g ' /etc/mdadm.conf

  echo "===================== configure samba shares ====================="
  cp /etc/samba/smb.conf /etc/samba/smb.conf.bck
  owner=root
  owngrp=root
  tgtpath=/etc/samba
  dirperm=755
  perm=644
  tgtfile=smb.conf
  getfile=${me}-${tgtfile}
  getfile
  tgtfile=smbusers
  getfile=${me}-${tgtfile}
  getfile
  enableservice smb

  echo "========================== config vsftpd ========================="
  cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bck
  owner=root
  owngrp=root
  tgtpath=/etc/vsftpd
  dirperm=755
  perm=600
  tgtfile=vsftp.conf
  getfile=${me}-${tgtfile}
  getfile
  enableservice vsftpd

  echo "========================= config extra SW ========================"
  yum -y install ntfs-3g rar unrar pypar par2cmdline lxsplit

}

# NFS
echo "==================== configure NFS service ===================="
cp /etc/sysconfig/nfs /etc/sysconfig/nfs.bck
perl -pi -e '
  s?^#RQUOTAD_PORT.*?RQUOTAD_PORT=40000? ;
  s?^#LOCKD_TCPPORT.*?LOCKD_TCPPORT=40001? ;
  s?^#LOCKD_UDPPORT.*?LOCKD_UDPPORT=40001? ;
  s?^#MOUNTD_PORT.*?MOUNTD_PORT=40002? ;
  s?^#STATD_PORT.*?STATD_PORT=40003? ;
  s?^#STATD_OUTGOING_PORT.*?STATD_OUTGOING_PORT=40004? '\
  /etc/sysconfig/nfs
enableservice portmap
enableservice nfs


# SCRIPT
echo "==================== Stop and remove services ===================="
for x in ${services_to_stop} ;do
  if [ -f /etc/init.d/${x} ];then
    echo Removing service $x
    chkconfig $x off
  fi
done

echo "============ Configure sources and install software =============="
#[ -d /etc/yum.repos.d ] && rm -f /etc/yum.repos.d/*.repo
cat << EOF > /etc/yum.repos.d/cider-optional.repo
[cider-optional]
name=cider optional software
baseurl=${sw_url}/optional
gpgcheck=0
enabled=1
EOF

case ${os} in
  centos)
    yum -y install rpmforge-release epel-release
    rpm --import ${pre_url}/cfgfiles/RPM-GPG-KEY.dag.txt
    rpm --import file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL
  ;;
  redhat)
    case ${os_version} in
      4.*)
        cat << EOF > /etc/sysconfig/rhn/sources
yum ${os}-${os_version} ${pre_url}/${os}/${os_version}/disc1
EOF
        owner=root
        owngrp=root
        tgtpath=/etc/sysconfig/rhn
        dirperm=755
        perm=600
        tgtfile=up2date
        getfile=${tgtfile}
        getfile
        rpm --import /usr/share/rhn/RPM-GPG-KEY
      ;;
      5.*)
        cat << EOF > /etc/yum.repos.d/${os}-${os_version}.repo
[${os}-${os_version}-server]
name=${os}-${os_version}
baseurl=${pre_url}/${os}/${os_version}/Server
gpgcheck=1
gpgkey=${pre_url}/${os}/${os_version}/RPM-GPG-KEY-redhat-release

[${os}-${os_version}-vt]
name=${os}-${os_version}
baseurl=${pre_url}/${os}/${os_version}/VT
gpgcheck=1
gpgkey=${pre_url}/${os}/${os_version}/RPM-GPG-KEY-redhat-release

[${os}-${os_version}-cluster]
name=${os}-${os_version}
baseurl=${pre_url}/${os}/${os_version}/Cluster
gpgcheck=1
gpgkey=${pre_url}/${os}/${os_version}/RPM-GPG-KEY-redhat-release

[${os}-${os_version}-cluster-storage]
name=${os}-${os_version}
baseurl=${pre_url}/${os}/${os_version}/ClusterStorage
gpgcheck=1
gpgkey=${pre_url}/${os}/${os_version}/RPM-GPG-KEY-redhat-release
EOF
      ;;
    esac
  ;;
esac

yum -y install clamd clamav clamav-db pwgen scponly $([ ${is_vmware_guest} -eq 1 ] && echo VMwareTools) $([ ${is_vmware_guest} -eq 0 -a ${is_kvm_guest} -eq 0 ] && echo "hdparm hddtemp bonnie bonnie++" ) $([ "${is_vmware_server}" = "on" ] && echo "VMware-server VMware-server-console")
yum -y update
[ ${is_vmware_guest} -eq 1 -o ${is_kvm_guest} -eq 1 -o "${cpubrand}" != "GenuineIntel" ] && yum -y erase microcode_ctl

echo "======================== configure clamav ========================"
install -dm 775 -o clamav -g clamav /var/log/clamav
install -m 775 -o clamav -g clamav /dev/null /var/log/clamav/freshclam.log
install -m 775 -o clamav -g clamav /dev/null /var/log/clamav/freshclam-update.log
install -m 775 -o clamav -g clamav /dev/null /var/log/clamav/clamd.log
[ -f /etc/clamd.conf ] && cp /etc/clamd.conf /etc/clamd.conf.bck
owner=root
owngrp=root
tgtpath=/etc
dirperm=755
perm=644
tgtfile=clamd.conf
getfile=${me}-${tgtfile}
getfile
enableservice clamd
tgtpath=/etc/cron.d
dirperm=700
tgtfile=clamd.cron
getfile=${me}-${tgtfile}
getfile
tgtfile=tempmon.cron
getfile=${tgtfile}
[ ${is_vmware_guest} -eq 0 -a ${is_kvm_guest} -eq 0 ] && getfile

echo "========================= configure Munin ========================="
perl -pi -e 's/^allow.*/allow 10.107.119.8/g' /etc/munin/munin-node.conf

echo "======================== configure postfix ========================"
[ -f /etc/postfix/main.cf ] && cp /etc/postfix/main.cf /etc/postfix/main.cf.bck
owner=root
owngrp=root
tgtpath=/etc/postfix
dirperm=700
perm=644
tgtfile=main.cf
getfile=${tgtfile}.${me}
getfile

if [ ${is_vmware_guest} -eq 1 ];then
  echo "===================== Configure VMwareTools ======================"
  /usr/bin/vmware-config-tools.pl default
  enableservice vmware-tools
  [ "$(egrep "VMware|vmhgfs" /etc/fstab)" ] && perl -ni -e ' print unless /# Beginning of the block/../# End of the block/' /etc/fstab
fi

echo "======================= Configure SNMPD =========================="
[ ! -d /etc/snmp ] && mkdir -p /etc/snmp
cat << EOF > /etc/snmp/snmpd.conf
syscontact Alexander Swen (alex@swen.nu)
syslocation Thuis
EOF

echo "========================= Configure ntp =========================="
cat <<EOF > /etc/ntp.conf
restrict 127.0.0.1
restrict default kod nomodify notrap
server nl.pool.ntp.org
driftfile /var/lib/ntp/drift/ntp.drift # path for drift file
logfile   /var/log/ntp          # alternate log file
EOF

echo "===================== Turn on services ==========================="
for x in portmap nfs hddtemp ntpd postfix;do
  enableservice ${x}
done

echo "========================== adding users =========================="
/usr/sbin/groupadd -g 500 staff
addcmd=/usr/sbin/useradd
create_staff_user 1000 alex "Alexander Swen" '<password hash>' 'ssh-rsa AAAAB3 the rest of public key'

echo "================== Configure Network, hosts etc =================="

echo "Making /etc/bashrc"
cat << EOF >> /etc/bashrc
export LS_OPTIONS='--color=auto'
eval \`dircolors\`
alias ll-la="ls -lAh \${LS_OPTIONS}"
alias ll-l="ls -lAh \${LS_OPTIONS}"
alias ll="ls -lAh \${LS_OPTIONS}"
alias l="ls -lAh \${LS_OPTIONS}"
alias df="df -H"
alias vi="/usr/bin/vim"
PATH=/data/scripts:$PATH
EOF

echo "Making /etc/hosts"
cat << EOF > /etc/hosts
127.0.0.1       localhost.localdomain localhost
::1             localhost6.localdomain6 localhost6
${internal_ip}  ${me} ${me}.${domain}
EOF

echo "Making /etc/vimrc"
cat << EOF >> /etc/vimrc
syntax on
set sw=2
set ts=2
set et
set mouse=a
EOF

[ "${me}" = "cider" ] || cat << EOF > /etc/auto.netwerk
backup          -rw,soft,intr myserver:/data/backup
drivers         -rw,soft,intr myserver:/data/drivers
scripts         -rw,soft,intr myserver:/data/scripts
software        -rw,soft,intr myserver:/data/software
tftpboot        -rw,soft,intr myserver:/data/tftpboot
EOF
perl -pi -e 's?^BROWSE_MODE.*?BROWSE_MODE="yes"?' /etc/sysconfig/autofs
[ -f /etc/auto.master -a "${me}" != "cider" ] && cp /etc/auto.master /etc/auto.master-$(date +%Y%m%d)
[ "${me}" = "cider" ] || cat << EOF > /etc/auto.master
/netwerk        /etc/auto.netwerk
EOF

# Network security in environment opslaan
[ -f /etc/sysctl.conf ] && cp /etc/sysctl.conf /etc/sysctl.conf-$(date +%Y%m%d)
cat << EOF-sysctl-conf >> /etc/sysctl.conf
# config added by installscript Alex

# too many routers
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
#  Never let someone else tell you how to get somewhere
net.ipv4.conf.all.accept_source_route = 0
#  We don't want inside adresses on the outside
net.ipv4.conf.all.rp_filter = 1
#  But we do want to know about it
net.ipv4.conf.all.log_martians = 0
# We don't give our network map away for free
net.ipv4.icmp_echo_ignore_broadcasts = 1
# enable redhat syn cookies
net.ipv4.tcp_syncookies = 1

# Speed up raid rebuilds
dev.raid.speed_limit_max = 800000

# rules for Libvirt
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0
EOF-sysctl-conf

cat << EOF-cfg-firewall > ${tmp_dir}/cfg-firewall
#!/bin/bash
echo "==================== Configure Firewall ===================="
echo "remove the startup of this script from /etc/rc.d/rc.local"
[ -f ${tmp_dir}/serverprofile ] && . ${tmp_dir}/serverprofile
[ -z "${type}" -o -z "${internal_if}" -o -z "${internal_ip}" -o -z "${internal_bcast}" ]&& echo "Waarchijnlijk zijn niet alle parameters goed ingevuld. hierdoor zal de firewall niet goed werken. controleer of internal_bcast internal_ip internal_if en type zijn ingesteld in de configfile"

perl -ni -e 'print unless /'cfg-firewall'/' /etc/rc.d/rc.local

# effe backup maken,
[ -f /etc/sysconfig/iptables ] && cp /etc/sysconfig/iptables /etc/sysconfig/iptables-$(date +%Y%m%d)
[ -f /etc/sysconfig/iptables-config ] && cp /etc/sysconfig/iptables /etc/sysconfig/iptables-config-$(date +%Y%m%d)

echo "Configure firewall"
IPTABLES=/sbin/iptables
IP6TABLES=/sbin/ip6tables
DEPMOD=/sbin/depmod
MODPROBE=/sbin/modprobe
type=${type}
INTERNAL_IF=${internal_if}
INTERNAL_IP=${internal_ip}
BROADCAST=${internal_bcast}
br4_ip=${br4_ip}

\$DEPMOD -a
\$MODPROBE ip_tables
\$MODPROBE ip_conntrack
\$MODPROBE iptable_filter
\$MODPROBE iptable_mangle
[ "\${type}" = "ftp" ] && \$MODPROBE ip_conntrack_ftp
\$MODPROBE ipt_limit
\$MODPROBE ipt_state
\$MODPROBE ipt_LOG
\$MODPROBE ipt_recent

echo flush all
\$IPTABLES -F
echo set policies
# standaard policies
[ "\$(\$IPTABLES -nL|awk '/Chain/ && /RH-Firewall-1-INPUT/ {print \$2}')" = "RH-Firewall-1-INPUT" ] && \$IPTABLES -X RH-Firewall-1-INPUT
\$IPTABLES -P FORWARD DROP
\$IPTABLES -P INPUT DROP
\$IPTABLES -P OUTPUT ACCEPT
[ "\$(\$IPTABLES -nL|awk '/Chain/ && /BRUTE-FORCE/ {print \$2}')" = "BRUTE-FORCE" ] || \$IPTABLES -N BRUTE-FORCE
[ "\$(\$IPTABLES -nL|awk '/Chain/ && /VALID-SRC/ {print \$2}')" = "VALID-SRC" ] || \$IPTABLES -N VALID-SRC
[ "\$(\$IPTABLES -nL|awk '/Chain/ && /VALID-DST/ {print \$2}')" = "VALID-DST" ] || \$IPTABLES -N VALID-DST
[ "\$(\$IPTABLES -nL|awk '/Chain/ && /DDOS/ {print \$2}')" = "DDOS" ] || \$IPTABLES -N DDOS

#ip6 hebben we niet
\$IP6TABLES -P INPUT DROP

# loopback mag wel
\$IPTABLES -A INPUT -i lo -j ACCEPT

echo validate source and dest
# Source and Destination Address Sanity Checks
# Drop packets from networks covered in RFC 1918 (private nets)
# Drop packets from external interface IP
echo inp/outp naar valid
\$IPTABLES -A INPUT   -i \${INTERNAL_IF} -j VALID-SRC
\$IPTABLES -A OUTPUT  -o \${INTERNAL_IF} -j VALID-DST
# forward gebruiken we niet
#\$IPTABLES -A FORWARD -i \${INTERNAL_IF} -j VALID-SRC
#\$IPTABLES -A FORWARD -o \${INTERNAL_IF} -j VALID-DST
echo validate source and dest
# Source and Destination Address Sanity Checks
# Drop packets from networks covered in RFC 1918 (private nets)
# Drop packets from external interface IP
# wij laten 10.0.0.0/8 en 192.168.0.0/16 wel toe.
invalid="172.16.0.0/12 224.0.0.0/4 240.0.0.0/5 127.0.0.0/8 0.0.0.0/8 169.254.0.0/16"
for invalidsource in \${invalid};do
  \$IPTABLES -A VALID-SRC -s \${invalidsource} -m recent --set -j DROP
done
\$IPTABLES -A VALID-SRC -d 127.0.0.0/8 -m recent --set -j DROP
\$IPTABLES -A VALID-SRC -d 255.255.255.255 -j DROP
\$IPTABLES -A VALID-SRC -s \${INTERNAL_IP} -m recent --set -j DROP
\$IPTABLES -A VALID-DST -d 224.0.0.0/4 -m recent --set -j DROP

echo only syn
# beste eerst bogus syns droppen, bestaande sessies wel accepteren
\$IPTABLES -A INPUT -p TCP ! --syn -m state --state NEW -m recent --set -j DROP
\$IPTABLES -A INPUT -p ALL -m state --state ESTABLISHED,RELATED -j ACCEPT
\$IPTABLES -A INPUT -p ALL -m recent --rcheck --seconds 60 -m limit --limit 1/minute -j LOG --log-level 4
\$IPTABLES -A INPUT -p ALL -m recent --rcheck --seconds 60 -j DROP

echo icmp allow
# relevante icmp wel binnen laten....
# relevante icmp wel binnen laten....
icmptypes="3 8 11 12"
for icmptype in \${icmptypes};do
  \$IPTABLES -A INPUT -p ICMP -s 0/0 --icmp-type \${icmptype} -j ACCEPT
done

allow_ftp_server () {
  echo allow ftp
  \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --update --seconds 60 --hitcount 4 --rttl --name FTP -m limit --limit 1/minute -j LOG --log-level 4 --log-prefix "BRUTE-FORCE-FTP "
  \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --rcheck --seconds 60 --hitcount 4 --rttl --name FTP -j DROP
  \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --rcheck --rttl --name FTP -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 21 -m state --state NEW -m recent --set --name FTP -j BRUTE-FORCE
}

allow_ssh_server () {
  echo allow ssh
  if [ -z "\$1" ];then
    port=22
    \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --update --seconds 60 --hitcount 10 --rttl --name SSH -m limit --limit 1/minute -j LOG --log-level 4 --log-prefix "BRUTE-FORCE-SSH "
    \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --rcheck --seconds 60 --hitcount 10 --rttl --name SSH -j DROP
    \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --rcheck --rttl --name SSH -j ACCEPT
  else
    port=\${1}
  fi
  \$IPTABLES -A INPUT -d \${INTERNAL_IP} -p tcp --dport \${port} -m state --state NEW -m recent --set --name SSH -j BRUTE-FORCE
}

allow_vmware_server () {
  echo allow vmware
  \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --update --seconds 60 --hitcount 4 --rttl --name VMWARE-SERVER -m limit --limit 1/minute -j LOG --log-level 4 --log-prefix "BRUTE-FORCE-VMWARE-SERVER "
  \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --rcheck --seconds 60 --hitcount 4 --rttl --name VMWARE-SERVER -j DROP
  \$IPTABLES -A BRUTE-FORCE -d \${INTERNAL_IP} -m recent --rcheck --rttl --name VMWARE-SERVER -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 902 -m state --state NEW -m recent --set --name VMWARE-SERVER -j BRUTE-FORCE
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 904 -m state --state NEW -m recent --set --name VMWARE-SERVER -j BRUTE-FORCE
}

allow_dns_server () {
  echo allow dns
  \$IPTABLES -A INPUT -s 10.107.119.0/24 -d \${INTERNAL_IP} -p udp --dport 53 -j ACCEPT
  \$IPTABLES -A INPUT -s 10.107.119.0/24 -d \${INTERNAL_IP} -p tcp --dport 53 -j ACCEPT
  \$IPTABLES -A DDOS -d \${INTERNAL_IP} -m recent --update --seconds 1 --hitcount 20 --rttl --name DNS -m limit --limit 1/minute -j LOG --log-level 4 --log-prefix "DDOS-DNS "
  \$IPTABLES -A DDOS -d \${INTERNAL_IP} -m recent --rcheck --seconds 1 --hitcount 20 --rttl --name DNS -j DROP
  \$IPTABLES -A DDOS -d \${INTERNAL_IP} -m recent --rcheck --rttl --name DNS -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p udp --dport 53 -m state --state NEW -m recent --set --name DNS -j DDOS
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 53 -m state --state NEW -m recent --set --name DNS -j DDOS
}

allow_kvm_clients () {
  echo allow kvm
 \$IPTABLES -A FORWARD -m physdev --physdev-is-bridged -j ACCEPT
}

allow_web_server () {
  echo allow webserver
  webserverports="80 443 8080 8443"
  for port in \${webserverports};do
    \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport \${port} -j ACCEPT
  done
}

allow_smtp_server () {
  echo allow smtp
  \$IPTABLES -A DDOS -d \${INTERNAL_IP} -m recent --update --seconds 60 --hitcount 30 --rttl --name SMTP -m limit --limit 1/minute -j LOG --log-level 4 --log-prefix "DDOS-SMTP "
  \$IPTABLES -A DDOS -d \${INTERNAL_IP} -m recent --rcheck --seconds 60 --hitcount 30 --rttl --name SMTP -j DROP
  \$IPTABLES -A DDOS -d \${INTERNAL_IP} -m recent --rcheck --rttl --name SMTP -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 25 -m state --state NEW -m recent --set --name SMTP -j DDOS
}

allow_zimbra_server () {
  echo allow zimbra
  zimbraserverports="110 143 993 995 7071 7780"
  for port in \${zimbraserverports};do
    \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport \${port} -j ACCEPT
  done
}

allow_dhcp_server () {
  echo allow dhcpd
  \$IPTABLES -A INPUT -p udp -s 0/0 --sport 68 --dport 67 -j ACCEPT
  \$IPTABLES -A INPUT -p tcp -s 0/0 --sport 68 --dport 67 -j ACCEPT
}

allow_tftp_server () {
  echo allow tftpd
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p udp --dport 69 -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 69 -j ACCEPT
}

allow_munin () {
  echo allow munin
  \$IPTABLES -A INPUT -d \${INTERNAL_IP} -s 10.107.119.8 -p tcp --dport 4949 -j ACCEPT
}
allow_nrpe () {
  echo allow Nagios NRPE
  \$IPTABLES -A INPUT -d \${INTERNAL_IP} -s 10.107.119.8 -p tcp --dport 5666 -j ACCEPT
}

allow_puppet () {
  echo allow puppet
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 8140 -j ACCEPT
}

allow_iscsi_targetd () {
  echo allow iscsi
  \$IPTABLES -A INPUT -s 0/0 -d \${br4_ip} -p tcp --dport 3260 -j ACCEPT
}

allow_smb_server () {
  echo allow samba
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p udp --dport 137 -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p udp --dport 138 -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 139 -j ACCEPT
  \$IPTABLES -A INPUT -s 0/0 -d \${INTERNAL_IP} -p tcp --dport 445 -j ACCEPT
}

allow_nfs_server () {
  echo allow nfs
  nfsports="111 2049 40000:40004"
  for port in \${nfsports};do
    \$IPTABLES -A INPUT -i \${INTERNAL_IF} -s 0/0 -d \${INTERNAL_IP} -p tcp --dport \${port} -j ACCEPT
    \$IPTABLES -A INPUT -i \${INTERNAL_IF} -s 0/0 -d \${INTERNAL_IP} -p udp --dport \${port} -j ACCEPT
  done
}

echo snmp rules
snmpports="161 199"
#for port in \${snmpports};do
#  \$IPTABLES -A INPUT -i \${INTERNAL_IF} -d \${INTERNAL_IP} -p udp -s 192.168.7.0/24 --dport \${port} -j ACCEPT
#  \$IPTABLES -A INPUT -i \${INTERNAL_IF} -d \${INTERNAL_IP} -p tcp -s 192.168.7.0/24 --dport \${port} -j ACCEPT
#done

allow_ssh_server
allow_munin

echo service specific
# Type specific services
case \${type} in
  dhcp) allow_dhcp_server ;;
  inst)
    allow_dhcp_server
    allow_tftp_server
    allow_web_server
  ;;
  web|web2) allow_web_server ;;
  web-sha)
    allow_web_server
    allow_ssh_server 2280
  ;;
  dns) allow_dns_server ;;
  ftp) allow_ftp_server ;;
  mail) allow_smtp_server ;;
  puppetmaster) allow_puppet ;;
  zimbra)
    allow_smtp_server
    allow_web_server
    allow_zimbra_server
  ;;
  file)
    allow_kvm_clients
    allow_ftp_server
    allow_web_server
    allow_smb_server
    allow_nfs_server
    allow_tftp_server
    allow_dhcp_server
    allow_iscsi_targetd
    allow_ssh_server 4022
  ;;
  kvm)
    allow_kvm_clients
  ;;
esac

echo log rules
\$IPTABLES -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,URG,PSH -m limit --limit 5/minute -j LOG --log-level 4 --log-prefix "NMAP-XMAS SCAN:" --log-tcp-options --log-ip-options
\$IPTABLES -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -m limit --limit 5/minute -j LOG --log-level 4 --log-prefix "SYN/RST SCAN:" --log-tcp-options --log-ip-options
\$IPTABLES -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 5/minute -j LOG --log-level 4 --log-prefix "SYN/FIN SCAN:" --log-tcp-options --log-ip-options
#\$IPTABLES -A INPUT -m limit --limit 5/minute ! -d \${BROADCAST} -p udp ! --sport 137 ! --dport 137 -j LOG --log-level 4 --log-prefix "rejected: "
\$IPTABLES -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
#\$IPTABLES -A INPUT -m limit --limit 5/minute ! -d \${BROADCAST} ! -p udp -j LOG --log-level 4 --log-prefix "rejected: "
\$IPTABLES -A INPUT -p tcp -j REJECT --reject-with tcp-reset

# nieuwe regels opslaan
/sbin/iptables-save > /etc/sysconfig/iptables
perl -pi -e 's?IPTABLES_MODULES=.*?IPTABLES_MODULES="ip_conntrack ip_conntrack_tftp ip_conntrack_netbios_ns ip_conntrack_ftp ipt_limit ipt_state ipt_recent ipt_LOG iptable_mangle"?' /etc/sysconfig/iptables-config

# restart iptables
/etc/init.d/iptables restart
EOF-cfg-firewall
chmod +x ${tmp_dir}/cfg-firewall
echo "${tmp_dir}/cfg-firewall >>${logfile} 2>&1" >>/etc/rc.d/rc.local

echo "Allowing keylogin and deny rootlogin via SSH"
perl -pi -e '
  s/^#Port.*/Port 22\nPort 4022/ ;
  s/^#RSAAuthentication/RSAAuthentication/ ;
  s/^#PubkeyAuthentication/PubkeyAuthentication/ ;
  s/^#AuthorizedKeysFile/AuthorizedKeysFile/ '\
  /etc/ssh/sshd_config

echo "making wheel a sudoer"
perl -pi -e 's/^# %wheel.*ALL=\(ALL\)\t*ALL/%wheel\tALL=\(ALL\)\tALL/' /etc/sudoers

echo "making alex his life easier"
echo "sudo su -" > ~alex/.bash_history
chown alex:staff ~alex/.bash_history

echo "setting scrollbackbuffer for screen"
echo "defscrollback 50000">> /root/.screenrc
echo "defscrollback 50000">> /etc/skel/.screenrc

echo "making motd"
cat << EOF >/etc/motd
$(for x in $(seq 1 $(echo "***${me}.${domain} ***"|wc -m));do echo -n "*";done)
*** ${me}.${domain} ***
$(for x in $(seq 1 $(echo "***${me}.${domain} ***"|wc -m));do echo -n "*";done)
EOF

if [ "$(grep "active raid" /proc/mdstat)" ];then
  echo "fixing grub mirror"
  cat << EOF |grub
root (hd0,0)
setup (hd0)
root (hd1,0)
setup (hd1)
EOF
fi

echo "disabling crtlaltdel"
perl -pi -e ' s?ca::ctrlaltdel?#ca::ctrlaltdel?' /etc/inittab
if [ ${is_vmware_guest} -eq 0 -a ${is_kvm_guest} -eq 0 ];then
  echo "enabling serial console"
  echo "S0:12345:respawn:/sbin/agetty 115200 ttyS0 linux" >> /etc/inittab
  perl -pi -e '
    s?^splashimage?#splashimage?;
     s?^hiddenmenu?hiddenmenu\nserial --unit=0 --speed=115200\nterminal --timeout=15 serial console?;
     s?rhgb quiet?rhgb quiet console=tty0 console=ttyS0,115200n8?g '\
     /boot/grub/menu.lst
fi

case ${type} in
  kvm) mk-kvm-server;;
  leon) mk_leon_server;;
  fs|fileserver-santpoort) mk_basic_fileserver;;
  file) mk_filesystems;mk-file-server;;
  web) mk_filesystems;mk-web-server;;
  web2) mk_filesystems;mk-web2-server;;
  puppetmaster) mk-puppetmaster;;
  zimbra) mk-zimbra-server;;
esac

exit 0

